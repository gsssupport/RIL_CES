CREATE TABLE TRN_VAL
(
TRNV_ID INTEGER NOT NULL ,
CUST_NAME CHARACTER VARYING(64) NULL,
FATHER_NAME CHARACTER VARYING(32) NULL,
AGE INTEGER NULL,
DOB TIMESTAMP WITHOUT TIME ZONE NULL, CREATED_BY text NOT NULL, 
 CREATED_BY_NAME text ,
 CREATED_DATE timestamp without time zone NOT NULL,
 MODIFIED_BY text,
 MODIFIED_BY_NAME text,
 MODIFIED_DATE timestamp without time zone,
 SYSTEM_ID TEXT, 
 SYSTEM_NAME text, 
 PRCT_ID TEXT,
 CREATED_BY_STS_ID TEXT, 
 MODIFIED_BY_STS_ID TEXT, 
 STATUS TEXT,
 PROCESS_STATUS TEXT ,
 DT_CODE TEXT ,
 DT_DESCRIPTION TEXT ,
 DTT_CODE TEXT ,
 DTT_DESCRIPTION TEXT ,
 VERSION_NO integer DEFAULT 0 
 );
CREATE SEQUENCE SEQ_TRN_VAL
INCREMENT 1
MINVALUE 1
MAXVALUE 9223372036854775807
START 1 
CACHE 20;


ALTER TABLE TRN_VAL
 ALTER COLUMN TRNV_ID  SET DEFAULT nextval('SEQ_TRN_VAL');


CREATE OR REPLACE FUNCTION TRG_TRN_VAL()
RETURNS trigger AS
$BODY$
BEGIN
NEW.TRG_TRN_VAL=CURRENT_TIMESTAMP;RETURN NEW;
END $BODY$
LANGUAGE plpgsql VOLATILE
COST 100;
ALTER TABLE TRN_VAL ADD CONSTRAINT TRN_VAL_pkey primary key(TRNV_ID);CREATE TABLE HST_TRN_VAL
(HST_ID INTEGER PRIMARY KEY,
TRNV_ID INTEGER NULL ,
CUST_NAME CHARACTER VARYING(64) NULL,
FATHER_NAME CHARACTER VARYING(32) NULL,
AGE INTEGER NULL,
DOB TIMESTAMP WITHOUT TIME ZONE NULL, CREATED_BY text NOT NULL, 
 CREATED_BY_NAME text ,
 CREATED_DATE timestamp without time zone NOT NULL,
 MODIFIED_BY text,
 MODIFIED_BY_NAME text,
 MODIFIED_DATE timestamp without time zone,
 SYSTEM_ID TEXT, 
 SYSTEM_NAME text, 
 PRCT_ID TEXT,
 CREATED_BY_STS_ID TEXT, 
 MODIFIED_BY_STS_ID TEXT, 
 STATUS TEXT,
 PROCESS_STATUS TEXT ,
 DT_CODE TEXT ,
 DT_DESCRIPTION TEXT ,
 DTT_CODE TEXT ,
 DTT_DESCRIPTION TEXT ,
 VERSION_NO integer DEFAULT 0 
 );
CREATE OR REPLACE FUNCTION FN_TRG_HST_TRN_VAL()
 RETURNS trigger AS 
 $BODY$ 
 DECLARE
 vSEQ BIGINT; 
 BEGIN 
 SELECT COALESCE(MAX(HST_ID),0)+1 INTO vSEQ FROM HST_TRN_VAL ;
 IF TG_OP = 'INSERT' THEN 
 INSERT INTO HST_TRN_VAL SELECT vSEQ , NEW.* ; 
 ELSIF TG_OP = 'UPDATE' THEN 
 INSERT INTO HST_TRN_VAL SELECT vSEQ , NEW.* ; 

 END IF; 
 RETURN NEW; 
 END; 
 $BODY$ 
 LANGUAGE plpgsql ; 

 CREATE TRIGGER TRG_HST_TRN_VAL
 AFTER INSERT Or UPDATE 
 ON TRN_VAL
 FOR EACH ROW 
 EXECUTE PROCEDURE FN_TRG_HST_TRN_VAL() ;


ALTER TABLE TRN_VAL  DISABLE TRIGGER TRG_HST_TRN_VAL ;
